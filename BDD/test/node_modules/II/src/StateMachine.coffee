try
  model = require("Model")
  eventhandler = require("EventHandler")
catch error
  model = require(__dirname + "/Model")
  eventhandler = require(__dirname + "/EventHandler")

class StateMachine extends model
	@include eventhandler	

	init: (json) ->
		console.log @, json
		@subscribe "switchState", @switch
		@bindings = {}
		@UITrigger = if typeof json._trigger == "string" then document.getElementById json._trigger else json._trigger 
		@UIStates = []
		number = 0
		for key, value of json
			if key == "_trigger" then continue
			@UIStates[key] = State.create(
				"element": value
				"id": "UIState-" + number
			)
			unless number
				@UIStates[key].activate()
			number++;

		@UITrigger?.onclick = @proxy ->
			@publish "switchState"
		, @
		@

	getState: (state) ->	
		return @reccords[state] or null

	getPrimaryState: ->
		return @getState 0

	getSecondaryState: ->
		return @getState 1

	switch: (state) ->
		unless state?
			try
				willActivate = null
				hasActivated = false
				while !hasActivated
					for key, state of @UIStates
						if state.activated then willActivate = 0
						if willActivate
							state.activate() 
							@UITrigger.className = (@UITrigger.className.replace /\ ?UI[A-Z][a-z0-9]*Page/, "") + " UI" + key
							hasActivated = true
							willActivate = null;
							@current = key
						else state.deactivate()
						if willActivate? then willActivate = true
				
				return true
			catch error
			return false;

		s.deactivate() for key, s of @UIStates 
		@UIStates[state].activate()
		@UITrigger.className = (@UITrigger.className.replace /\ ?UI[A-Z][a-z0-9]*Page/, "") + " UI" + state
		return true

class State extends model
	@include eventhandler	

	init: (json) ->
		@bindings = 
			"activate": { "_head": 0 }
			"deactivate": { "_head": 0 }
		@name = json.id
		@activated = false
		if typeof json.element == "string"  
			try
			  @element = document.getElementById json.element
			  return @
			catch error
		else
			try
				@element = json.element
			catch error

	activate: =>
		unless @activated
			@activated = true
			@element.className = @element.className + " UIStateActive"
			@publish("activate")

	deactivate: =>
		unless not @activated
			@activated = false
			@element.className = @element.className.replace(/\ ?UIStateActive\ ?/g, "")
			@publish("deactivate")

SM = StateMachine

module.exports = StateMachine 